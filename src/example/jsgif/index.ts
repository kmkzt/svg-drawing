/**
 * This class lets you encode animated GIF files
 * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm
 * @author Kevin Weiner (original Java version - kweiner@fmsware.com)
 * @author Thibault Imbert (AS3 version - bytearray.org)
 * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)
 * @version 0.1 AS3 implementation
 */

export default function() {
  let chr: any = {}
  for (let i: number = 0; i < 256; i++) chr[i] = String.fromCharCode(i)

  function ByteArray() {
    ;(this as any).bin = []
  }

  ByteArray.prototype.getData = function() {
    for (let v = '', l = this.bin.length, i = 0; i < l; i++)
      v += chr[this.bin[i]]
    return v
  }

  ByteArray.prototype.writeByte = function(val: any) {
    this.bin.push(val)
  }

  ByteArray.prototype.writeUTFBytes = function(str: string) {
    for (let l = str.length, i = 0; i < l; i++)
      this.writeByte(str.charCodeAt(i))
  }

  ByteArray.prototype.writeBytes = function(
    array: any,
    offset: any,
    length: any
  ) {
    for (let l = length || array.length, i = offset || 0; i < l; i++)
      this.writeByte(array[i])
  }

  let exports: any = {}
  let width: number | null // image size
  let height: number | null
  let transparent: string | null = null // transparent color if given
  let transIndex: any // transparent index in color table
  let repeat: number = -1 // no repeat
  let delay: number = 0 // frame delay (hundredths)
  let started = false // ready to output frames
  let out: any
  let image: any // current frame
  let pixels: any // BGR byte array from frame
  let indexedPixels: any // converted frame indexed to palette
  let colorDepth: any // number of bit planes
  let colorTab: any // RGB palette
  let usedEntry: any = [] // active palette entries
  let palSize: any = 7 // color table size (bits-1)
  let dispose: any = -1 // disposal code (-1 = use default)
  let closeStream: any = false // close stream when finished
  let firstFrame: any = true
  let sizeSet: any = false // if false, get size from first frame
  let sample: any = 10 // default sample interval for quantizer
  let comment = 'Generated by jsgif (https://github.com/antimatter15/jsgif/)' // default comment for generated gif

  /**
   * Sets the delay time between each frame, or changes it for subsequent frames
   * (applies to last frame added)
   * int delay time in milliseconds
   * @param ms
   */

  let setDelay = (exports.setDelay = function setDelay(ms: number) {
    delay = Math.round(ms / 10)
  })

  /**
   * Sets the GIF frame disposal code for the last added frame and any
   *
   * subsequent frames. Default is 0 if no transparent color has been set,
   * otherwise 2.
   * @param code
   * int disposal code.
   */

  let setDispose = (exports.setDispose = function setDispose(code: any) {
    if (code >= 0) dispose = code
  })

  /**
   * Sets the number of times the set of GIF frames should be played. Default is
   * 1; 0 means play indefinitely. Must be invoked before the first image is
   * added.
   *
   * @param iter
   * int number of iterations.
   * @return
   */

  let setRepeat = (exports.setRepeat = function setRepeat(iter: number) {
    if (iter >= 0) repeat = iter
  })

  /**
   * Sets the transparent color for the last added frame and any subsequent
   * frames. Since all colors are subject to modification in the quantization
   * process, the color in the final palette for each frame closest to the given
   * color becomes the transparent color for that frame. May be set to null to
   * indicate no transparent color.
   * @param
   * Color to be treated as transparent on display.
   */

  let setTransparent = (exports.setTransparent = function setTransparent(
    c: any
  ) {
    transparent = c
  })

  /**
   * Sets the comment for the block comment
   * @param
   * string to be insterted as comment
   */

  let setComment = (exports.setComment = function setComment(c: any) {
    comment = c
  })

  /**
   * The addFrame method takes an incoming BitmapData object to create each frames
   * @param
   * BitmapData object to be treated as a GIF's frame
   */

  let addFrame = (exports.addFrame = function addFrame(
    im: any,
    is_imageData: boolean
  ) {
    if (im === null || !started || out === null) {
      throw new Error('Please call start method before calling addFrame')
    }

    let ok = true

    try {
      if (!is_imageData) {
        image = im.getImageData(0, 0, im.canvas.width, im.canvas.height).data
        if (!sizeSet) setSize(im.canvas.width, im.canvas.height)
      } else {
        if (im instanceof ImageData) {
          image = im.data
          if (!sizeSet || width != im.width || height != im.height) {
            setSize(im.width, im.height)
          } else {
          }
        } else if (im instanceof Uint8ClampedArray) {
          if (width && height && im.length == width * height * 4) {
            image = im
          } else {
            console.log(
              'Please set the correct size: ImageData length mismatch'
            )
            ok = false
          }
        } else {
          console.log('Please provide correct input')
          ok = false
        }
      }
      getImagePixels() // convert to correct format if necessary
      analyzePixels() // build color table & map pixels

      if (firstFrame) {
        writeLSD() // logical screen descriptior
        writePalette() // global color table
        if (repeat >= 0) {
          // use NS app extension to indicate reps
          writeNetscapeExt()
        }
      }

      writeGraphicCtrlExt() // write graphic control extension
      if (comment !== '') {
        writeCommentExt() // write comment extension
      }
      writeImageDesc() // image descriptor
      if (!firstFrame) writePalette() // local color table
      writePixels() // encode and write pixel data
      firstFrame = false
    } catch (e) {
      ok = false
    }

    return ok
  })

  /**
   * @description: Downloads the encoded gif with the given name
   * No need of any conversion from the stream data (out) to base64
   * Solves the issue of large file sizes when there are more frames
   * and does not involve in creation of any temporary data in the process
   * so no wastage of memory, and speeds up the process of downloading
   * to just calling this function.
   * @parameter {String} filename filename used for downloading the gif
   */

  let download = (exports.download = function download(filename: string) {
    if (out === null || closeStream == false) {
      console.log(
        'Please call start method and add frames and call finish method before calling download'
      )
    } else {
      filename =
        filename !== undefined
          ? filename.endsWith('.gif')
            ? filename
            : filename + '.gif'
          : 'download.gif'
      let templink = document.createElement('a')
      templink.download = filename
      templink.href = URL.createObjectURL(
        new Blob([new Uint8Array(out.bin)], { type: 'image/gif' })
      )
      templink.click()
    }
  })

  /**
   * Adds final trailer to the GIF stream, if you don't call the finish method
   * the GIF stream will not be valid.
   */

  let finish = (exports.finish = function finish() {
    if (!started) return false

    let ok = true
    started = false

    try {
      out.writeByte(0x3b) // gif trailer
      closeStream = true
    } catch (e) {
      ok = false
    }

    return ok
  })

  /**
   * Resets some members so that a new stream can be started.
   * This method is actually called by the start method
   */

  let reset = function reset() {
    // reset for subsequent use
    transIndex = 0
    image = null
    pixels = null
    indexedPixels = null
    colorTab = null
    closeStream = false
    firstFrame = true
  }

  /**
   * * Sets frame rate in frames per second. Equivalent to
   * <code>setDelay(1000/fps)</code>.
   * @param fps
   * float frame rate (frames per second)
   */

  let setFrameRate = (exports.setFrameRate = function setFrameRate(
    fps: number
  ) {
    if (fps != 0xf) delay = Math.round(100 / fps)
  })

  /**
   * Sets quality of color quantization (conversion of images to the maximum 256
   * colors allowed by the GIF specification). Lower values (minimum = 1)
   * produce better colors, but slow processing significantly. 10 is the
   * default, and produces good color mapping at reasonable speeds. Values
   * greater than 20 do not yield significant improvements in speed.
   * @param quality
   * int greater than 0.
   * @return
   */

  let setQuality = (exports.setQuality = function setQuality(quality: number) {
    if (quality < 1) quality = 1
    sample = quality
  })

  /**
   * Sets the GIF frame size. The default size is the size of the first frame
   * added if this method is not invoked.
   * @param w
   * int frame width.
   * @param h
   * int frame width.
   */

  let setSize = (exports.setSize = function setSize(w: number, h: number) {
    if (started && !firstFrame) return
    width = w
    height = h
    if (width < 1) width = 320
    if (height < 1) height = 240
    sizeSet = true
  })

  /**
   * Initiates GIF file creation on the given stream.
   * @param os
   * OutputStream on which GIF images are written.
   * @return false if initial write failed.
   */

  let start = (exports.start = function start() {
    reset()
    let ok = true
    closeStream = false
    out = new (ByteArray as any)()
    try {
      out.writeUTFBytes('GIF89a') // header
    } catch (e) {
      ok = false
    }

    return (started = ok)
  })

  let cont = (exports.cont = function cont() {
    reset()
    let ok = true
    closeStream = false
    out = new (ByteArray as any)()

    return (started = ok)
  })

  /**
   * Analyzes image colors and creates color map.
   */

  let analyzePixels = function analyzePixels() {
    let len = pixels.length
    let nPix = len / 3
    indexedPixels = []
    let nq = new (NeuQuant as any)(pixels, len, sample)

    // initialize quantizer
    colorTab = nq.process() // create reduced palette

    // map image pixels to new palette
    let k = 0
    for (let j = 0; j < nPix; j++) {
      let index = nq.map(
        pixels[k++] & 0xff,
        pixels[k++] & 0xff,
        pixels[k++] & 0xff
      )
      usedEntry[index] = true
      indexedPixels[j] = index
    }

    pixels = null
    colorDepth = 8
    palSize = 7

    // get closest match to transparent color if specified
    if (transparent !== null) {
      transIndex = findClosest(transparent)
    }
  }

  /**
   * Returns index of palette color closest to c
   */

  let findClosest = function findClosest(c: any) {
    if (colorTab === null) return -1
    let r = (c & 0xff0000) >> 16
    let g = (c & 0x00ff00) >> 8
    let b = c & 0x0000ff
    let minpos = 0
    let dmin = 256 * 256 * 256
    let len = colorTab.length

    for (let i = 0; i < len; ) {
      let dr = r - (colorTab[i++] & 0xff)
      let dg = g - (colorTab[i++] & 0xff)
      let db = b - (colorTab[i] & 0xff)
      let d = dr * dr + dg * dg + db * db
      let index = i / 3
      if (usedEntry[index] && d < dmin) {
        dmin = d
        minpos = index
      }
      i++
    }
    return minpos
  }

  /**
   * Extracts image pixels into byte array "pixels
   */

  let getImagePixels = function getImagePixels() {
    let w: number = width || 0
    let h: number = height || 0
    pixels = []
    let data: any = image
    let count: number = 0

    for (let i = 0; i < h; i++) {
      for (let j = 0; j < w; j++) {
        let b = i * w * 4 + j * 4
        pixels[count++] = data[b]
        pixels[count++] = data[b + 1]
        pixels[count++] = data[b + 2]
      }
    }
  }

  /**
   * Writes Graphic Control Extension
   */

  let writeGraphicCtrlExt = function writeGraphicCtrlExt() {
    out.writeByte(0x21) // extension introducer
    out.writeByte(0xf9) // GCE label
    out.writeByte(4) // data block size
    let transp
    let disp
    if (transparent === null) {
      transp = 0
      disp = 0 // dispose = no action
    } else {
      transp = 1
      disp = 2 // force clear if using transparent color
    }
    if (dispose >= 0) {
      disp = dispose & 7 // user override
    }
    disp <<= 2
    // packed fields
    out.writeByte(
      0 | // 1:3 reserved
      disp | // 4:6 disposal
      0 | // 7 user input - 0 = none
        transp
    ) // 8 transparency flag

    WriteShort(delay) // delay x 1/100 sec
    out.writeByte(transIndex) // transparent color index
    out.writeByte(0) // block terminator
  }

  /**
   * Writes Comment Extention
   */

  let writeCommentExt = function writeCommentExt() {
    out.writeByte(0x21) // extension introducer
    out.writeByte(0xfe) // comment label
    out.writeByte(comment.length) // Block Size (s)
    out.writeUTFBytes(comment)
    out.writeByte(0) // block terminator
  }

  /**
   * Writes Image Descriptor
   */

  let writeImageDesc = function writeImageDesc() {
    out.writeByte(0x2c) // image separator
    WriteShort(0) // image position x,y = 0,0
    WriteShort(0)
    WriteShort(width || 0) // image size
    WriteShort(height || 0)

    // packed fields
    if (firstFrame) {
      // no LCT - GCT is used for first (or only) frame
      out.writeByte(0)
    } else {
      // specify normal LCT
      out.writeByte(
        0x80 | // 1 local color table 1=yes
        0 | // 2 interlace - 0=no
        0 | // 3 sorted - 0=no
        0 | // 4-5 reserved
          palSize
      ) // 6-8 size of color table
    }
  }

  /**
   * Writes Logical Screen Descriptor
   */

  let writeLSD = function writeLSD() {
    // logical screen size
    WriteShort(width || 0)
    WriteShort(height || 0)
    // packed fields
    out.writeByte(
      0x80 | // 1 : global color table flag = 1 (gct used)
      0x70 | // 2-4 : color resolution = 7
      0x00 | // 5 : gct sort flag = 0
        palSize
    ) // 6-8 : gct size

    out.writeByte(0) // background color index
    out.writeByte(0) // pixel aspect ratio - assume 1:1
  }

  /**
   * Writes Netscape application extension to define repeat count.
   */

  let writeNetscapeExt = function writeNetscapeExt() {
    out.writeByte(0x21) // extension introducer
    out.writeByte(0xff) // app extension label
    out.writeByte(11) // block size
    out.writeUTFBytes('NETSCAPE' + '2.0') // app id + auth code
    out.writeByte(3) // sub-block size
    out.writeByte(1) // loop sub-block id
    WriteShort(repeat) // loop count (extra iterations, 0=repeat forever)
    out.writeByte(0) // block terminator
  }

  /**
   * Writes color table
   */

  let writePalette = function writePalette() {
    out.writeBytes(colorTab)
    let n = 3 * 256 - colorTab.length
    for (let i = 0; i < n; i++) out.writeByte(0)
  }

  let WriteShort = function WriteShort(pValue: number) {
    out.writeByte(pValue & 0xff)
    out.writeByte((pValue >> 8) & 0xff)
  }

  /**
   * Encodes and writes pixel data
   */

  let writePixels = function writePixels() {
    let myencoder = new (LZWEncoder as any)(
      width,
      height,
      indexedPixels,
      colorDepth
    )
    myencoder.encode(out)
  }

  /**
   * Retrieves the GIF stream
   */

  let stream = (exports.stream = function stream() {
    return out
  })

  let setProperties = (exports.setProperties = function setProperties(
    has_start: boolean,
    is_first: boolean
  ) {
    started = has_start
    firstFrame = is_first
  })

  return exports
}

/**
 * This class handles LZW encoding
 * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.
 * @author Kevin Weiner (original Java version - kweiner@fmsware.com)
 * @author Thibault Imbert (AS3 version - bytearray.org)
 * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)
 * @version 0.1 AS3 implementation
 */

let LZWEncoder = function() {
  let exports: any = {}
  let EOF: number = -1
  let imgW: number
  let imgH: number
  let pixAry: any
  let initCodeSize: any
  let remaining: any
  let curPixel: any

  // GIFCOMPR.C - GIF Image compression routines
  // Lempel-Ziv compression based on 'compress'. GIF modifications by
  // David Rowley (mgardi@watdcsu.waterloo.edu)
  // General DEFINEs

  let BITS: number = 12
  let HSIZE: number = 5003 // 80% occupancy

  // GIF Image compression - modified 'compress'
  // Based on: compress.c - File compression ala IEEE Computer, June 1984.
  // By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)
  // Jim McKie (decvax!mcvax!jim)
  // Steve Davies (decvax!vax135!petsd!peora!srd)
  // Ken Turkowski (decvax!decwrl!turtlevax!ken)
  // James A. Woods (decvax!ihnp4!ames!jaw)
  // Joe Orost (decvax!vax135!petsd!joe)

  let n_bits: any // number of bits/code
  let maxbits: number = BITS // user settable max # bits/code
  let maxcode: any // maximum code, given n_bits
  let maxmaxcode: any = 1 << BITS // should NEVER generate this code
  let htab: any[] = []
  let codetab: any[] = []
  let hsize: number = HSIZE // for dynamic table sizing
  let free_ent: number = 0 // first unused entry

  // block compression parameters -- after all codes are used up,
  // and compression rate changes, start over.

  let clear_flg: boolean = false

  // Algorithm: use open addressing double hashing (no chaining) on the
  // prefix code / next character combination. We do a variant of Knuth's
  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime
  // secondary probe. Here, the modular division first probe is gives way
  // to a faster exclusive-or manipulation. Also do block compression with
  // an adaptive reset, whereby the code table is cleared when the compression
  // ratio decreases, but after the table fills. The variable-length output
  // codes are re-sized at this point, and a special CLEAR code is generated
  // for the decompressor. Late addition: construct the table according to
  // file size for noticeable speed improvement on small files. Please direct
  // questions about this implementation to ames!jaw.

  let g_init_bits: any
  let ClearCode: any
  let EOFCode: any

  // output
  // Output the given code.
  // Inputs:
  // code: A n_bits-bit integer. If == -1, then EOF. This assumes
  // that n_bits =< wordsize - 1.
  // Outputs:
  // Outputs code to the file.
  // Assumptions:
  // Chars are 8 bits long.
  // Algorithm:
  // Maintain a BITS character long buffer (so that 8 codes will
  // fit in it exactly). Use the VAX insv instruction to insert each
  // code in turn. When the buffer fills up empty it and start over.

  let cur_accum: number = 0
  let cur_bits: number = 0
  let masks: any = [
    0x0000,
    0x0001,
    0x0003,
    0x0007,
    0x000f,
    0x001f,
    0x003f,
    0x007f,
    0x00ff,
    0x01ff,
    0x03ff,
    0x07ff,
    0x0fff,
    0x1fff,
    0x3fff,
    0x7fff,
    0xffff
  ]

  // Number of characters so far in this 'packet'
  let a_count: any

  // Define the storage for the packet accumulator
  let accum: any[] = []

  let LZWEncoder = (exports.LZWEncoder = function LZWEncoder(
    width: number,
    height: number,
    pixels: number,
    color_depth: number
  ) {
    imgW = width
    imgH = height
    pixAry = pixels
    initCodeSize = Math.max(2, color_depth)
  })

  // Add a character to the end of the current packet, and if it is 254
  // characters, flush the packet to disk.
  let char_out = function char_out(c: any, outs: any) {
    accum[a_count++] = c
    if (a_count >= 254) flush_char(outs)
  }

  // Clear out the hash table
  // table clear for block compress

  let cl_block = function cl_block(outs: any) {
    cl_hash(hsize)
    free_ent = ClearCode + 2
    clear_flg = true
    output(ClearCode, outs)
  }

  // reset code table
  let cl_hash = function cl_hash(hsize: number) {
    for (let i = 0; i < hsize; ++i) htab[i] = -1
  }

  let compress = (exports.compress = function compress(
    init_bits: any,
    outs: any
  ) {
    let fcode: any
    let i: any /* = 0 */
    let c: any
    let ent: any
    let disp: any
    let hsize_reg: any
    let hshift: any

    // Set up the globals: g_init_bits - initial number of bits
    g_init_bits = init_bits

    // Set up the necessary values
    clear_flg = false
    n_bits = g_init_bits
    maxcode = MAXCODE(n_bits)

    ClearCode = 1 << (init_bits - 1)
    EOFCode = ClearCode + 1
    free_ent = ClearCode + 2

    a_count = 0 // clear packet

    ent = nextPixel()

    hshift = 0
    for (fcode = hsize; fcode < 65536; fcode *= 2) ++hshift
    hshift = 8 - hshift // set hash code range bound

    hsize_reg = hsize
    cl_hash(hsize_reg) // clear hash table

    output(ClearCode, outs)

    outer_loop: while ((c = nextPixel()) != EOF) {
      fcode = (c << maxbits) + ent
      i = (c << hshift) ^ ent // xor hashing

      if (htab[i] == fcode) {
        ent = codetab[i]
        continue
      } else if (htab[i] >= 0) {
        // non-empty slot

        disp = hsize_reg - i // secondary hash (after G. Knott)
        if (i === 0) disp = 1

        do {
          if ((i -= disp) < 0) i += hsize_reg

          if (htab[i] == fcode) {
            ent = codetab[i]
            continue outer_loop
          }
        } while (htab[i] >= 0)
      }

      output(ent, outs)
      ent = c
      if (free_ent < maxmaxcode) {
        codetab[i] = free_ent++ // code -> hashtable
        htab[i] = fcode
      } else cl_block(outs)
    }

    // Put out the final code.
    output(ent, outs)
    output(EOFCode, outs)
  })

  // ----------------------------------------------------------------------------
  let encode = (exports.encode = function encode(os: any) {
    os.writeByte(initCodeSize) // write "initial code size" byte
    remaining = imgW * imgH // reset navigation variables
    curPixel = 0
    compress(initCodeSize + 1, os) // compress and write the pixel data
    os.writeByte(0) // write block terminator
  })

  // Flush the packet to disk, and reset the accumulator
  let flush_char = function flush_char(outs: any) {
    if (a_count > 0) {
      outs.writeByte(a_count)
      outs.writeBytes(accum, 0, a_count)
      a_count = 0
    }
  }

  let MAXCODE = function MAXCODE(n_bits: any) {
    return (1 << n_bits) - 1
  }

  // ----------------------------------------------------------------------------
  // Return the next pixel from the image
  // ----------------------------------------------------------------------------

  let nextPixel = function nextPixel() {
    if (remaining === 0) return EOF
    --remaining
    let pix = pixAry[curPixel++]
    return pix & 0xff
  }

  let output = function output(code: any, outs: any) {
    cur_accum &= masks[cur_bits]

    if (cur_bits > 0) cur_accum |= code << cur_bits
    else cur_accum = code

    cur_bits += n_bits

    while (cur_bits >= 8) {
      char_out(cur_accum & 0xff, outs)
      cur_accum >>= 8
      cur_bits -= 8
    }

    // If the next entry is going to be too big for the code size,
    // then increase it, if possible.

    if (free_ent > maxcode || clear_flg) {
      if (clear_flg) {
        maxcode = MAXCODE((n_bits = g_init_bits))
        clear_flg = false
      } else {
        ++n_bits
        if (n_bits == maxbits) maxcode = maxmaxcode
        else maxcode = MAXCODE(n_bits)
      }
    }

    if (code == EOFCode) {
      // At EOF, write the rest of the buffer.
      while (cur_bits > 0) {
        char_out(cur_accum & 0xff, outs)
        cur_accum >>= 8
        cur_bits -= 8
      }

      flush_char(outs)
    }
  }

  LZWEncoder.apply(this, arguments)
  return exports
}

/*
 * NeuQuant Neural-Net Quantization Algorithm
 * ------------------------------------------
 *
 * Copyright (c) 1994 Anthony Dekker
 *
 * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See
 * "Kohonen neural networks for optimal colour quantization" in "Network:
 * Computation in Neural Systems" Vol. 5 (1994) pp 351-367. for a discussion of
 * the algorithm.
 *
 * Any party obtaining a copy of these files from the author, directly or
 * indirectly, is granted, free of charge, a full and unrestricted irrevocable,
 * world-wide, paid up, royalty-free, nonexclusive right and license to deal in
 * this software and documentation files (the "Software"), including without
 * limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons who
 * receive copies from any such party to do so, with the only requirement being
 * that this copyright notice remain intact.
 */

/*
 * This class handles Neural-Net quantization algorithm
 * @author Kevin Weiner (original Java version - kweiner@fmsware.com)
 * @author Thibault Imbert (AS3 version - bytearray.org)
 * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)
 * @version 0.1 AS3 implementation
 */

let NeuQuant = function() {
  let exports: any = {}
  let netsize: number = 256 /* number of colours used */

  /* four primes near 500 - assume no image has a length so large */
  /* that it is divisible by all four primes */

  let prime1: number = 499
  let prime2: number = 491
  let prime3: number = 487
  let prime4: number = 503
  let minpicturebytes: number = 3 * prime4 /* minimum size for input image */

  /*
   * Program Skeleton ---------------- [select samplefac in range 1..30] [read
   * image from input file] pic = (unsigned char*) malloc(3*width*height);
   * initnet(pic,3*width*height,samplefac); learn(); unbiasnet(); [write output
   * image header, using writecolourmap(f)] inxbuild(); write output image using
   * inxsearch(b,g,r)
   */

  /*
   * Network Definitions -------------------
   */

  let maxnetpos: number = netsize - 1
  let netbiasshift: number = 4 /* bias for colour values */
  let ncycles: number = 100 /* no. of learning cycles */

  /* defs for freq and bias */
  let intbiasshift: number = 16 /* bias for fractions */
  let intbias: any = 1 << intbiasshift
  let gammashift: any = 10 /* gamma = 1024 */
  let gamma: any = 1 << gammashift
  let betashift: any = 10
  let beta: any = intbias >> betashift /* beta = 1/1024 */
  let betagamma: any = intbias << (gammashift - betashift)

  /* defs for decreasing radius factor */
  let initrad: any = netsize >> 3 /* for 256 cols, radius starts */
  let radiusbiasshift: any = 6 /* at 32.0 biased by 6 bits */
  let radiusbias: any = 1 << radiusbiasshift
  let initradius: any = initrad * radiusbias /* and decreases by a */
  let radiusdec: any = 30 /* factor of 1/30 each cycle */

  /* defs for decreasing alpha factor */
  let alphabiasshift: any = 10 /* alpha starts at 1.0 */
  let initalpha: any = 1 << alphabiasshift
  let alphadec: any /* biased by 10 bits */

  /* radbias and alpharadbias used for radpower calculation */
  let radbiasshift: any = 8
  let radbias: any = 1 << radbiasshift
  let alpharadbshift: any = alphabiasshift + radbiasshift
  let alpharadbias: any = 1 << alpharadbshift

  /*
   * Types and Global Variables --------------------------
   */

  let thepicture: any /* the input image itself */
  let lengthcount: any /* lengthcount = H*W*3 */
  let samplefac: any /* sampling factor 1..30 */

  // typedef int pixel[4]; /* BGRc */
  let network: any /* the network itself - [netsize][4] */
  let netindex: any[] = []

  /* for network lookup - really 256 */
  let bias: any[] = []

  /* bias and freq arrays for learning */
  let freq: any[] = []
  let radpower: any[] = []

  let NeuQuant = (exports.NeuQuant = function NeuQuant(
    thepic: any,
    len: any,
    sample: any
  ) {
    let i: number
    let p: any

    thepicture = thepic
    lengthcount = len
    samplefac = sample

    network = new Array(netsize)

    for (i = 0; i < netsize; i++) {
      network[i] = new Array(4)
      p = network[i]
      p[0] = p[1] = p[2] = (i << (netbiasshift + 8)) / netsize
      freq[i] = intbias / netsize /* 1/netsize */
      bias[i] = 0
    }
  })

  let colorMap = function colorMap() {
    let map = []
    let index = new Array(netsize)

    for (let i = 0; i < netsize; i++) index[network[i][3]] = i

    let k = 0
    for (let l = 0; l < netsize; l++) {
      let j = index[l]
      map[k++] = network[j][0]
      map[k++] = network[j][1]
      map[k++] = network[j][2]
    }

    return map
  }

  /*
   * Insertion sort of network and building of netindex[0..255] (to do after
   * unbias)
   * -------------------------------------------------------------------------------
   */

  let inxbuild = function inxbuild() {
    let i: any
    let j: any
    let smallpos: any
    let smallval: any
    let p: any
    let q: any
    let previouscol: any
    let startpos: any

    previouscol = 0
    startpos = 0
    for (i = 0; i < netsize; i++) {
      p = network[i]
      smallpos = i
      smallval = p[1] /* index on g */

      /* find smallest in i..netsize-1 */
      for (j = i + 1; j < netsize; j++) {
        q = network[j]
        if (q[1] < smallval) {
          /* index on g */
          smallpos = j
          smallval = q[1] /* index on g */
        }
      }
      q = network[smallpos]

      /* swap p (i) and q (smallpos) entries */
      if (i != smallpos) {
        j = q[0]
        q[0] = p[0]
        p[0] = j
        j = q[1]
        q[1] = p[1]
        p[1] = j
        j = q[2]
        q[2] = p[2]
        p[2] = j
        j = q[3]
        q[3] = p[3]
        p[3] = j
      }

      /* smallval entry is now in position i */

      if (smallval != previouscol) {
        netindex[previouscol] = (startpos + i) >> 1

        for (j = previouscol + 1; j < smallval; j++) netindex[j] = i

        previouscol = smallval
        startpos = i
      }
    }

    netindex[previouscol] = (startpos + maxnetpos) >> 1
    for (j = previouscol + 1; j < 256; j++)
      netindex[j] = maxnetpos /* really 256 */
  }

  /*
   * Main Learning Loop ------------------
   */

  let learn = function learn() {
    let i: any
    let j: any
    let b: any
    let g: any
    let r: any
    let radius: any
    let rad: any
    let alpha: any
    let step: any
    let delta: any
    let samplepixels: any
    let p: any
    let pix: any
    let lim: any

    if (lengthcount < minpicturebytes) samplefac = 1

    alphadec = 30 + (samplefac - 1) / 3
    p = thepicture
    pix = 0
    lim = lengthcount
    samplepixels = lengthcount / (3 * samplefac)
    delta = (samplepixels / ncycles) | 0
    alpha = initalpha
    radius = initradius

    rad = radius >> radiusbiasshift
    if (rad <= 1) rad = 0

    for (i = 0; i < rad; i++)
      radpower[i] = alpha * (((rad * rad - i * i) * radbias) / (rad * rad))

    if (lengthcount < minpicturebytes) step = 3
    else if (lengthcount % prime1 !== 0) step = 3 * prime1
    else {
      if (lengthcount % prime2 !== 0) step = 3 * prime2
      else {
        if (lengthcount % prime3 !== 0) step = 3 * prime3
        else step = 3 * prime4
      }
    }

    i = 0
    while (i < samplepixels) {
      b = (p[pix + 0] & 0xff) << netbiasshift
      g = (p[pix + 1] & 0xff) << netbiasshift
      r = (p[pix + 2] & 0xff) << netbiasshift
      j = contest(b, g, r)

      altersingle(alpha, j, b, g, r)
      if (rad !== 0) alterneigh(rad, j, b, g, r) /* alter neighbours */

      pix += step
      if (pix >= lim) pix -= lengthcount

      i++

      if (delta === 0) delta = 1

      if (i % delta === 0) {
        alpha -= alpha / alphadec
        radius -= radius / radiusdec
        rad = radius >> radiusbiasshift

        if (rad <= 1) rad = 0

        for (j = 0; j < rad; j++)
          radpower[j] = alpha * (((rad * rad - j * j) * radbias) / (rad * rad))
      }
    }
  }

  /*
   ** Search for BGR values 0..255 (after net is unbiased) and return colour
   * index
   * ----------------------------------------------------------------------------
   */

  let map = (exports.map = function map(b: any, g: any, r: any) {
    let i
    let j
    let dist
    let a
    let bestd
    let p
    let best

    bestd = 1000 /* biggest possible dist is 256*3 */
    best = -1
    i = netindex[g] /* index on g */
    j = i - 1 /* start at netindex[g] and work outwards */

    while (i < netsize || j >= 0) {
      if (i < netsize) {
        p = network[i]
        dist = p[1] - g /* inx key */

        if (dist >= bestd) i = netsize
        /* stop iter */ else {
          i++
          if (dist < 0) dist = -dist
          a = p[0] - b
          if (a < 0) a = -a
          dist += a

          if (dist < bestd) {
            a = p[2] - r
            if (a < 0) a = -a
            dist += a

            if (dist < bestd) {
              bestd = dist
              best = p[3]
            }
          }
        }
      }

      if (j >= 0) {
        p = network[j]
        dist = g - p[1] /* inx key - reverse dif */

        if (dist >= bestd) j = -1
        /* stop iter */ else {
          j--
          if (dist < 0) dist = -dist
          a = p[0] - b
          if (a < 0) a = -a
          dist += a

          if (dist < bestd) {
            a = p[2] - r
            if (a < 0) a = -a
            dist += a
            if (dist < bestd) {
              bestd = dist
              best = p[3]
            }
          }
        }
      }
    }

    return best
  })

  let process = (exports.process = function process() {
    learn()
    unbiasnet()
    inxbuild()
    return colorMap()
  })

  /*
   * Unbias network to give byte values 0..255 and record position i to prepare
   * for sort
   * -----------------------------------------------------------------------------------
   */

  let unbiasnet = function unbiasnet() {
    let i
    let j

    for (i = 0; i < netsize; i++) {
      network[i][0] >>= netbiasshift
      network[i][1] >>= netbiasshift
      network[i][2] >>= netbiasshift
      network[i][3] = i /* record colour no */
    }
  }

  /*
   * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in
   * radpower[|i-j|]
   * ---------------------------------------------------------------------------------
   */

  let alterneigh = function alterneigh(
    rad: any,
    i: any,
    b: any,
    g: any,
    r: any
  ) {
    let j: any
    let k: any
    let lo: any
    let hi: any
    let a: any
    let m: any
    let p: any

    lo = i - rad
    if (lo < -1) lo = -1

    hi = i + rad
    if (hi > netsize) hi = netsize

    j = i + 1
    k = i - 1
    m = 1

    while (j < hi || k > lo) {
      a = radpower[m++]

      if (j < hi) {
        p = network[j++]

        try {
          p[0] -= (a * (p[0] - b)) / alpharadbias
          p[1] -= (a * (p[1] - g)) / alpharadbias
          p[2] -= (a * (p[2] - r)) / alpharadbias
        } catch (e) {} // prevents 1.3 miscompilation
      }

      if (k > lo) {
        p = network[k--]

        try {
          p[0] -= (a * (p[0] - b)) / alpharadbias
          p[1] -= (a * (p[1] - g)) / alpharadbias
          p[2] -= (a * (p[2] - r)) / alpharadbias
        } catch (e) {}
      }
    }
  }

  /*
   * Move neuron i towards biased (b,g,r) by factor alpha
   * ----------------------------------------------------
   */

  let altersingle = function altersingle(
    alpha: any,
    i: any,
    b: any,
    g: any,
    r: any
  ) {
    /* alter hit neuron */
    let n = network[i]
    n[0] -= (alpha * (n[0] - b)) / initalpha
    n[1] -= (alpha * (n[1] - g)) / initalpha
    n[2] -= (alpha * (n[2] - r)) / initalpha
  }

  /*
   * Search for biased BGR values ----------------------------
   */

  let contest = function contest(b: any, g: any, r: any) {
    /* finds closest neuron (min dist) and updates freq */
    /* finds best neuron (min dist-bias) and returns position */
    /* for frequently chosen neurons, freq[i] is high and bias[i] is negative */
    /* bias[i] = gamma*((1/netsize)-freq[i]) */

    let i: any
    let dist: any
    let a: any
    let biasdist: any
    let betafreq: any
    let bestpos: any
    let bestbiaspos: any
    let bestd: any
    let bestbiasd: any
    let n: any

    bestd = ~(1 << 31)
    bestbiasd = bestd
    bestpos = -1
    bestbiaspos = bestpos

    for (i = 0; i < netsize; i++) {
      n = network[i]
      dist = n[0] - b
      if (dist < 0) dist = -dist
      a = n[1] - g
      if (a < 0) a = -a
      dist += a
      a = n[2] - r
      if (a < 0) a = -a
      dist += a

      if (dist < bestd) {
        bestd = dist
        bestpos = i
      }

      biasdist = dist - (bias[i] >> (intbiasshift - netbiasshift))

      if (biasdist < bestbiasd) {
        bestbiasd = biasdist
        bestbiaspos = i
      }

      betafreq = freq[i] >> betashift
      freq[i] -= betafreq
      bias[i] += betafreq << gammashift
    }

    freq[bestpos] += beta
    bias[bestpos] -= betagamma
    return bestbiaspos
  }

  NeuQuant.apply(this, arguments)
  return exports
}
